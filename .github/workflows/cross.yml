name: cross

on: [push, pull_request]

env:
  RUST_MIN_SRV: "1.45"

jobs:
  style:
    name: Style
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job: [ { os: ubuntu-latest }, { os: macos-latest }, { os: windows-latest } ]
    steps:
      - uses: actions/checkout@v1
      - name: Install `rust` toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_MIN_SRV }}
          override: true
          profile: minimal # minimal component installation (ie, no documentation)
          components: rustfmt, clippy
      - name: "`fmt` testing"
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: "`clippy` testing"
        if: success() || failure() # run regardless of prior step ("`fmt` testing") success/failure
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build:
    name: Build
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest  , target: arm-unknown-linux-gnueabihf , use-cross: use-cross }
          - { os: ubuntu-latest  , target: aarch64-unknown-linux-gnu   , use-cross: use-cross }
          - { os: ubuntu-latest  , target: aarch64-unknown-linux-musl  , use-cross: use-cross }
          - { os: ubuntu-latest  , target: i686-unknown-linux-gnu      , use-cross: use-cross }
          - { os: ubuntu-latest  , target: i686-unknown-linux-musl     , use-cross: use-cross }
          - { os: ubuntu-latest  , target: x86_64-unknown-linux-gnu    , use-cross: use-cross }
          - { os: ubuntu-latest  , target: x86_64-unknown-linux-musl   , use-cross: use-cross }
          - { os: macos-latest   , target: x86_64-apple-darwin }
          - { os: windows-latest , target: i686-pc-windows-gnu }
          - { os: windows-latest , target: i686-pc-windows-msvc }
          - { os: windows-latest , target: x86_64-pc-windows-gnu }
          - { os: windows-latest , target: x86_64-pc-windows-msvc }
    steps:
      - uses: actions/checkout@v1
      - name: Install any prerequisites
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            arm-*-linux-*hf) sudo apt-get -y update ; sudo apt-get -y install binutils-arm-linux-gnueabihf ;;
            aarch64-*-linux-*) sudo apt-get -y update ; sudo apt-get -y install binutils-aarch64-linux-gnu ;;
          esac
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
          # toolchain
          TOOLCHAIN="stable" ## default to "stable" toolchain
          # * specify alternate TOOLCHAIN for *-pc-windows-gnu targets; gnu targets on Windows are broken for the standard *-pc-windows-msvc toolchain (refs: <https://github.com/rust-lang/rust/issues/47048>, <https://github.com/rust-lang/rust/issues/53454>, <https://github.com/rust-lang/cargo/issues/6754>)
          case ${{ matrix.job.target }} in *-pc-windows-gnu) TOOLCHAIN="stable-${{ matrix.job.target }}" ;; esac;
          # * use requested TOOLCHAIN if specified
          if [ -n "${{ matrix.job.toolchain }}" ]; then TOOLCHAIN="${{ matrix.job.toolchain }}" ; fi
          echo set-output name=TOOLCHAIN::${TOOLCHAIN}
          echo ::set-output name=TOOLCHAIN::${TOOLCHAIN}
          # staging directory
          STAGING='_staging'
          echo set-output name=STAGING::${STAGING}
          echo ::set-output name=STAGING::${STAGING}
          # determine EXE suffix
          EXE_suffix="" ; case ${{ matrix.job.target }} in *-pc-windows-*) EXE_suffix=".exe" ;; esac;
          echo set-output name=EXE_suffix::${EXE_suffix}
          echo ::set-output name=EXE_suffix::${EXE_suffix}
          # target-specific options
          # * CARGO_USE_CROSS (truthy)
          CARGO_USE_CROSS='true' ; case '${{ matrix.job.use-cross }}' in ''|0|f|false|n|no) unset CARGO_USE_CROSS ;; esac;
          echo set-output name=CARGO_USE_CROSS::${CARGO_USE_CROSS:-<empty>/false}
          echo ::set-output name=CARGO_USE_CROSS::${CARGO_USE_CROSS}
      - name: Create all needed build/work directories
        shell: bash
        run: |
          mkdir -p '${{ steps.vars.outputs.STAGING }}'
      - name: Install `rust` toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.vars.outputs.TOOLCHAIN }}
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal # minimal component installation (ie, no documentation)
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ steps.vars.outputs.CARGO_USE_CROSS }}
          command: build
          args: --no-default-features --release --target=${{ matrix.job.target }}
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ steps.vars.outputs.CARGO_USE_CROSS }}
          command: test
          args: --no-default-features --target=${{ matrix.job.target }}

#  coverage:
#    name: Code Coverage
#    runs-on: ${{ matrix.job.os }}
#    strategy:
#      fail-fast: true
#      matrix:
#        # job: [ { os: ubuntu-latest }, { os: macos-latest }, { os: windows-latest } ]
#        job: [ { os: ubuntu-latest } ] ## cargo-tarpaulin is currently only available on linux
#    steps:
#      - uses: actions/checkout@v1
#      # - name: Reattach HEAD ## may be needed for accurate code coverage info
#      #   run: git checkout ${{ github.head_ref }}
#      - name: Initialize workflow variables
#        id: vars
#        shell: bash
#        run: |
#          # staging directory
#          STAGING='_staging'
#          echo set-output name=STAGING::${STAGING}
#          echo ::set-output name=STAGING::${STAGING}
#          # check for CODECOV_TOKEN availability (work-around for inaccessible 'secrets' object for 'if'; see <https://github.community/t5/GitHub-Actions/jobs-lt-job-id-gt-if-does-not-work-with-env-secrets/m-p/38549>)
#          unset HAS_CODECOV_TOKEN
#          if [ -n $CODECOV_TOKEN ]; then HAS_CODECOV_TOKEN='true' ; fi
#          echo set-output name=HAS_CODECOV_TOKEN::${HAS_CODECOV_TOKEN}
#          echo ::set-output name=HAS_CODECOV_TOKEN::${HAS_CODECOV_TOKEN}
#        env:
#          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
#      - name: Create all needed build/work directories
#        shell: bash
#        run: |
#          mkdir -p '${{ steps.vars.outputs.STAGING }}/work'
#      - name: Install required packages
#        run: |
#          sudo apt-get -y install libssl-dev
#          pushd '${{ steps.vars.outputs.STAGING }}/work' >/dev/null
#          wget --no-verbose https://github.com/xd009642/tarpaulin/releases/download/0.13.3/cargo-tarpaulin-0.13.3-travis.tar.gz
#          tar xf cargo-tarpaulin-0.13.3-travis.tar.gz
#          cp cargo-tarpaulin "$(dirname -- "$(which cargo)")"/
#          popd >/dev/null
#      - name: Generate coverage
#        run: |
#          cargo tarpaulin --out Xml
#      - name: Upload coverage results (CodeCov.io)
#        # CODECOV_TOKEN (aka, "Repository Upload Token" for REPO from CodeCov.io) ## set via REPO/Settings/Secrets
#        # if: secrets.CODECOV_TOKEN (not supported {yet?}; see <https://github.community/t5/GitHub-Actions/jobs-lt-job-id-gt-if-does-not-work-with-env-secrets/m-p/38549>)
#        if: steps.vars.outputs.HAS_CODECOV_TOKEN
#        run: |
#          # CodeCov.io
#          cargo tarpaulin --out Xml
#          bash <(curl -s https://codecov.io/bash)
#        env:
#          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
